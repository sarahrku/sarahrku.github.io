[["data.html", "Chapter 5 Bearbejdning dag 1 5.1 Inledning og læringsmålene 5.2 Video ressourcer 5.3 Hvad er Tidyverse? 5.4 Lidt om tibbles 5.5 Transition fra base til tidyverse 5.6 Bearbejdning af data: dplyr 5.7 Visualisering: bruge som input i ggplot2 5.8 Problemstillinger 5.9 Kommentarer", " Chapter 5 Bearbejdning dag 1 5.1 Inledning og læringsmålene I skal være i stand til at: Beskrive generelle hvad R-pakken Tidyverse kan benyttes til. Beskrive en tibble og genkende når et datasæt er betragtet som “tidy.” Benytte nogle vigtige Tidyverse-verbs til at bearbejde data (filter(),select(), mutate(), rename(), arrange(), recode()). Bruge %&gt;% til at forbinde Tidyverse-verber sammen og at overføre data til et plot. 5.2 Video ressourcer Video 1 - introduktion til uge, hvad er den tidyverse-pakke? Hvad er en tibble? Link her hvis det ikke virker nedenunder: https://player.vimeo.com/video/547107062 Video 2 - rydder op den titanic datasæt med select() og drop_na() Link her hvis det ikke virker nedenunder: https://player.vimeo.com/video/546910795 Video 3 - introduktion til %&gt;% Link her hvis det ikke virker nedenunder: https://player.vimeo.com/video/546910781 Video 4 - tidyverse verber: select og filter Link her hvis det ikke virker nedenunder: https://player.vimeo.com/video/546910758 Video 5 - tidyverse verber: mutate og arrange Link her hvis det ikke virker nedenunder: https://player.vimeo.com/video/546910712 5.3 Hvad er Tidyverse? Tidyverse er en samling af pakker i R, som man bruger til at bearbejde datasæt. Formålet er ikke nødvendigvis at erstatte funktionaliteten af base-pakken, men til at bygge på den. Som vi kommer til at se i detaljer, tidyverse deler faktisk meget af den samme tankegang bag ggplot2 - men i stedet for at bruge + til at bygge komponenter op i et plot, bruger man %&gt;% (udtales ‘pipe’) til at tilknytte de forskellige funktioner til hinanden. Most common tidyverse packages Lad os starte med at indlæse pakken tidyverse. Vær opmærksom på, at har du ikke pakken på din computer, kan det tage lidt tid at installere - det er pga. de mange pakke der tidyverse er afhængig af, der enten skal også installeres eller opdateres. #install.packages(&quot;tidyverse) library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.8 ## ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ## ✓ readr 2.1.2 ✓ forcats 0.5.1 ## Warning: package &#39;tidyr&#39; was built under R version 4.0.5 ## Warning: package &#39;readr&#39; was built under R version 4.0.5 ## Warning: package &#39;dplyr&#39; was built under R version 4.0.5 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() Du kan se, at det faktisk er ikke kun én, men otte pakke som er blevet indlæst. Man kan godt indlæse alle pakke individuelt ved at bruge fk. library(dplyr), men det er meget bekvemt at indlæse alle på samme tid med brugen af library(tidyverse). Her er nogle beskrivelser af de pakker: pakke korte beskrivelse readr indlæse data ggplot2 plot data tibble lave “tibbles” - tidyverse’s svar på datarammer (data.frame). tidyr skifte imellem data forms (fk. ‘long’ &gt; ‘wide’ format, eller omvendt) purrr functional programming, gentalelse dplyr manipulere tibbles - beholde delmængder, skabe nye variabler, beregne oversigtsstatistikker osv. stringr manipulere strings (ikke brugt i dette kursus) forcats FOR CATegorical data (factors); håndtere faktor variabler Man kan også indlæse alle pakke individuelt ved at bruge fk. library(dplyr), men det er meget bekvemt bare at indlæse alle på samme tid med brugen af library(tidyverse). 5.3.1 Princippen med ‘tidy data’ Idéen bag tidyverse er, at hvis alle datasæt følger præcis den samme struktur, så er det ligefrem at bearbejde med vores data, til præcis som vi gerne vil have det. Datasæt som har den struktur hedder “tidy data.” For at betragte et datasæt som “tidy,” må det opfylde tre kriterie: Hver variabel i datasættet har sin egen kolonne Hver observation i datasættet har sin egen række Hver værdi i datasættet få sin egen cell Iris er et godt eksempel af tidy data: data(iris) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Hver variabel (Sepal.Length, Sepal.Width, Petal.Length, Petal.Width og Species) har sin egen kolon, og hver observation (e.g. 1,2,3, osv.) har sin egen række. Derudover har hver cell sin egen data værdi og det er dermed meget klart at læse og forstå dataframen ved øjnene. Principper af tidy data Det er tilfældet, at de fleste af datasæt i dette kursus hører til “tidy data,” især i disse notater, hvor vi benytter en del af indbygget datasæt. Nogle gange kan det dog være, at vi er nødt til at gøre noget, til at lave et datasæt om til en “tidy datasæt.” R-pakker dplyr og tidyr er velegnet til at hjælpe med at transformere et datasæt til en, der er “tidy,” og bagefter kan man forsætte i den sædvanlige måde med at analyse datasættet. Bemærk dog, at bar fordi et datasæt er “tidy,” betyder det ikke nødvendigvis, at det er klart til at analysere, for der kan godt være, at man har bruge for at filtrere eller rydde op i det. Pakken dplyr indeholder mange funktioner til at håndtere 5.4 Lidt om tibbles En tibble er det tidyverse svar på en data.frame fra base-R. De ligner hinanden meget og derfor skal man ikke tænk for meget over forskellen, men der er nogle opdateret aspekter i en tibble - for eksempel bruger en tibble ikke row.names, og når man visualiserer en tibble i R Markdown, få man lidt ekstra oplysninger, såsom dimensioner og data typer. Bemærk, at de fleste tidyverse funktioner fungerer lige så godt uanset om man har en tibble eller en data.frame. Bemærk, at jeg vedligeholder ordet ‘dataframe’ indenfor almindelig tekst. Man kan lave sin egen tibble på samme måde som en data.frame. tibble(x=1:3,y=c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;)) ## # A tibble: 3 × 2 ## x y ## &lt;int&gt; &lt;chr&gt; ## 1 1 a ## 2 2 b ## 3 3 c Man kan også lave en tribble, som er den samme som en tibble men har en lidt anderledes måde at indsætte data på. For eksempel er følgende tilsvarende til den overstående tibble: tribble(~x, ~y, 1, &quot;a&quot;, 2, &quot;b&quot;, 3, &quot;c&quot;) ## # A tibble: 3 × 2 ## x y ## &lt;dbl&gt; &lt;chr&gt; ## 1 1 a ## 2 2 b ## 3 3 c Den fleste tidyverse kode fungerer lige så godt uanset om man har en tibble eller en data.frame. Man kan lave en data.frame om til en tibble som i følgende: as_tibble(iris) ## # A tibble: 150 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # … with 140 more rows 5.5 Transition fra base til tidyverse Jeg introducerer tidyverse gennem et meget berømt datasæt som hedder titanic - det er ikke biologiske data men er stadigvæk ret interessant, og sjovt at manipulere på. titanic er brugt som en del af en åben konkurrence på hjemmesiden Kaggle, hvor mindst 31.000 personer indtil videre har arbejdet på at lave den bedste model til at forudsige, hvem der overlever katastrofen - linket er her, hvor du kan også læse om baggrunden til datasættet https://www.kaggle.com/c/titanic. 5.5.1 Om Titanic datasæt Man kan downloade datasættet, der hedder titanic_train, direkte fra Kaggle, men der er faktisk en R-pakke, der hedder titanic som gøre det mere bekvemt: #install.packages(&quot;titanic&quot;) #hvis ikke allerede installerede library(titanic) Her er beskrivelsen for pakken: titanic is an R package containing data sets providing information on the fate of passengers on the fatal maiden voyage of the ocean liner “Titanic,” summarized according to economic status (class), sex, age and survival. These data sets are often used as an introduction to machine learning on Kaggle. Vi vil gerne bruge titanic_train fordi det er datasættet, der bliver brugt på Kaggle til at træne maskinelærings modeller (som bliver testet på titanic_test for at evaluere, hvor god modellen er). Til at gøre tingene nemmere, lad os bare omdøb titanic_train til titanic og anvende glimpse, der er fra pakken dplyr, på datasættet. titanic &lt;- as_tibble(titanic_train) glimpse(titanic) ## Rows: 891 ## Columns: 12 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,… ## $ Survived &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1… ## $ Pclass &lt;int&gt; 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, 3… ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… ## $ Age &lt;dbl&gt; 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14, … ## $ SibSp &lt;int&gt; 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;A/5 21171&quot;, &quot;PC 17599&quot;, &quot;STON/O2. 3101282&quot;, &quot;113803&quot;, &quot;37… ## $ Fare &lt;dbl&gt; 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625,… ## $ Cabin &lt;chr&gt; &quot;&quot;, &quot;C85&quot;, &quot;&quot;, &quot;C123&quot;, &quot;&quot;, &quot;&quot;, &quot;E46&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;G6&quot;, &quot;C… ## $ Embarked &lt;chr&gt; &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;Q&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;… Jeg har også kopieret de variable beskrivelser her: PassengerId: unique index for each passenger Survived: Whether or not the passenger survived. 0 = No, 1 = Yes. Pclass: Ticket class: 1 = 1st Class, 2 = 2nd Class, 3 = 3rd Class. Name: A character string containing the name of each passenger. Sex: Character strings for passenger sex (“male”/ “female”). Age: Age in years. SibSp: The number of siblings/spouses aboard the titanic with the passenger Parch: The number of parents/children aboard the titanic with the passenger Ticket: Another character string containing the ticket ID of the passenger. Fare: The price paid for tickets in pounds Sterling (Keep in mind that unskilled workers made around 1 pound a week - these were expensive tickets!) Cabin: The cabin number of the passengers (character). Embarked: Where passengers boarded the titanic. C = Cherbourg, Q = Queenstown, S = Southampton). 5.5.2 Titanic: oprydning Der er faktisk nogle rengøring i datasættet vi skal tage os af, før vi kan komme videre med analysen. Vi kan se fra glimpse(titanic) ovenpå at der er 891 observationer. De fleste (687) passagerer har faktisk ingenting for variabel Cabin: sum(titanic$Cabin==&quot;&quot;) #ingenting for variabelen &#39;cabin&#39; ## [1] 687 Andre har mere end én cabin. Det ser ikke særlig tidy ud, og man kan hellere ikke forestille sig at få meget insigt fra variablen, så vi vælger at fjerne hele kolon med funktionen select(): titanic_no_cabin &lt;- select(titanic, -Cabin) select() er en af de kerne funktioner i tidyverse - her angiver vi, hvilke kolonner vi gerne vil beholde eller fjerne fra datasættet. I dette tilfælde har vi specificeret -Cabin, som betyder, at vi ikke vil have variablen Cabin med, men gerne vil beholde resten af kolonnerne. Prøv selv at køre select(titanic, Cabin) i stedet for - så får vi kun Cabin og fjerner resten af vores variabler. glimpse(titanic_no_cabin) ## Rows: 891 ## Columns: 11 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,… ## $ Survived &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1… ## $ Pclass &lt;int&gt; 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, 3… ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… ## $ Age &lt;dbl&gt; 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14, … ## $ SibSp &lt;int&gt; 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;A/5 21171&quot;, &quot;PC 17599&quot;, &quot;STON/O2. 3101282&quot;, &quot;113803&quot;, &quot;37… ## $ Fare &lt;dbl&gt; 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625,… ## $ Embarked &lt;chr&gt; &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;Q&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;… Næste tjekker vi efter NA i datasættet. NA er hvordan R betegner manglende værdier. Man kan se i følgende, mens de fleste variabler ikke har NA værdier, har variablen Age 177 NA. colSums(is.na(titanic_no_cabin)) ## PassengerId Survived Pclass Name Sex Age ## 0 0 0 0 0 177 ## SibSp Parch Ticket Fare Embarked ## 0 0 0 0 0 I dette tilfælde vælger jeg at fjerne alle passagerer som har NA i stedet for deres alder. Til dette formål bruger jeg funktionen drop_na, som fjerner alle observationer, der har NA i mindst èn variabel. titanic_clean &lt;- drop_na(titanic_no_cabin) colSums(is.na(titanic_clean)) ## PassengerId Survived Pclass Name Sex Age ## 0 0 0 0 0 0 ## SibSp Parch Ticket Fare Embarked ## 0 0 0 0 0 Nu kan vi tjekke igen, hvor mange observationer og variabel vi har tilbage. glimpse(titanic_clean) ## Rows: 714 ## Columns: 11 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19… ## $ Survived &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1… ## $ Pclass &lt;int&gt; 3, 1, 3, 1, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 2, 2, 3… ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… ## $ Age &lt;dbl&gt; 22, 38, 26, 35, 35, 54, 2, 27, 14, 4, 58, 20, 39, 14, 55, … ## $ SibSp &lt;int&gt; 1, 1, 0, 1, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 1, 0, 0, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;A/5 21171&quot;, &quot;PC 17599&quot;, &quot;STON/O2. 3101282&quot;, &quot;113803&quot;, &quot;37… ## $ Fare &lt;dbl&gt; 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 51.8625, 21.0750… ## $ Embarked &lt;chr&gt; &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;… Vi har beholdt 714 observationer og 11 variabler, og datasættet opfylder kriteren for at være tidy. 5.5.3 Pipe Man kan faktisk gøre den samme som i ovenstående ved at bruge pipe %&gt;%: titanic_clean &lt;- titanic %&gt;% # we take the titanic dataset select(-Cabin) %&gt;% # select the bits we want drop_na() # then remove the NAs Man bruger pipe %&gt;% til at kombinere adskillige tidyverse funktioner i den samme kommando - linjen slutter med %&gt;%, der fortæller, at vi skal bruge resultatet fra den linje som inputtet i den næste linje. Logikken er således, at vi starter med en dataframe, gør dernæst én ting ad gangen, og så slutter med en ny dataframe (som vi kan gemme med &lt;-). Bemærk, at processen ligner den, man bruger i ggplot2, men forskellen er at man bruger %&gt;% i stedet for + i denne ramme. Bemærk også her, at ligesom i ggplot2, skriver jeg koden over flere linjer. Det er ikke et krav men det gøre det nemmere at læse og forstå koden. For at illustrerer logikken, kan man se, at følgende to linjer er tilsvarende: #take x and apply some function f f(x) #traditional approach x %&gt;% f #tidyverse approach I begge tilfælde starter vi med x, og så anvender vi funktionen f med x som argument - en kæmpe fordel med den tidyverse løsning er, at når man har flere funktioner, slipper man for at anvende mange parenteser, og rækkefølgen man skriver funktionerne læses fra venstre til højre og ikke omvendt, se for eksempel følgende: #take x, apply f, then apply g, then apply h h(g(f(x))) #traditional approach x %&gt;% f %&gt;% g %&gt;% h #tidyverse approach På sammen måde i vores titanic oprydning kan man både pakke funktionen select() ind i funktionen drop_na(), eller bruge den tidyverse løsning, ligesom i nedenstående - de to giver det tilsvarende resultat: første bruger vi select() til at fjerne kolonnen Cabin, og så bruger vi drop_na() til at fjerne alle række med mindste én NA . titanic_clean &lt;- drop_na(select(titanic,-Cabin)) titanic_clean &lt;- titanic %&gt;% select(-Cabin) %&gt;% drop_na() 5.6 Bearbejdning af data: dplyr Pakken dplyr er nok den meste brugbare pakke til at bearbejde dataframes. Jeg gennemgår nogle af de meste almindelige muligheder med pakken, og der er også en “cheatsheet” som du kan downloade som reference: https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf. Jeg tager afsæt i følgende funktioner, og dækker flere gennem de forskellige øvelese og øvrige emner. dplyr verbs beskrivelse select() udvælge kolonner (variabler) filter() udvælge rækker (observationer) arrange() sortere rækker mutate() tilføje eller ændre eksisterende kolonner rename() ændre variabler navne recode() ændre selve data group_by() dele datasættet op efter en variabel summarise() aggregere rækker, findes ofte tilknyttet til group_by() Bemærk, at alle disse funktioner tager udgangspunkt i en dataframe, og man får altid en ny dataframe som outputtet. Ved at kunne bruge disse funktioner og kombinere dem (ved hjælp af %&gt;%), har man godt styr på bearbejdningen af datarammer. 5.6.1 dplyr verbs: select() Som vi lige har set i ovenstående, med select() udvælger man bestemte variabler. Vi kan vælger at beholde, fjerne eller andre rækkefølgen af variablerne i dataframe. Som eksempel, her beholder vi kun variablerne Name og Age: titanic_clean %&gt;% select(Name, Age) %&gt;% glimpse() ## Rows: 714 ## Columns: 2 ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Florence … ## $ Age &lt;dbl&gt; 22, 38, 26, 35, 35, 54, 2, 27, 14, 4, 58, 20, 39, 14, 55, 2, 31, … Hvis vi gerne vil fjerne en variabel fra en dataframe, kan vi bruge et minustegn. I nedenstående fjerner vi Name og Age fra dataframe: titanic_clean %&gt;% select(-Name, -Age) %&gt;% glimpse() ## Rows: 714 ## Columns: 9 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19… ## $ Survived &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1… ## $ Pclass &lt;int&gt; 3, 1, 3, 1, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 2, 2, 3… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… ## $ SibSp &lt;int&gt; 1, 1, 0, 1, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 1, 0, 0, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;A/5 21171&quot;, &quot;PC 17599&quot;, &quot;STON/O2. 3101282&quot;, &quot;113803&quot;, &quot;37… ## $ Fare &lt;dbl&gt; 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 51.8625, 21.0750… ## $ Embarked &lt;chr&gt; &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;… 5.6.2 dplyr verbs: filter() Med funktionen select() udvælger man bestemte variabler. Man anvender til gengæld funktionen filter() til at udvælge bestemte observationer (rækker) fra dataframe. I nedenstående beholder jeg rækkerne, hvor variablen Age er lig med 50. Bemærk, at vi bevarer alle variabler i dataframe. titanic_clean %&gt;% filter(Age == 50) %&gt;% glimpse() ## Rows: 10 ## Columns: 11 ## $ PassengerId &lt;int&gt; 178, 260, 300, 435, 459, 483, 527, 545, 661, 724 ## $ Survived &lt;int&gt; 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 ## $ Pclass &lt;int&gt; 1, 2, 1, 1, 2, 3, 2, 1, 1, 2 ## $ Name &lt;chr&gt; &quot;Isham, Miss. Ann Elizabeth&quot;, &quot;Parrish, Mrs. (Lutie Davis)… ## $ Sex &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;f… ## $ Age &lt;dbl&gt; 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 ## $ SibSp &lt;int&gt; 0, 0, 0, 1, 0, 0, 0, 1, 2, 0 ## $ Parch &lt;int&gt; 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 ## $ Ticket &lt;chr&gt; &quot;PC 17595&quot;, &quot;230433&quot;, &quot;PC 17558&quot;, &quot;13507&quot;, &quot;F.C.C. 13531&quot;,… ## $ Fare &lt;dbl&gt; 28.7125, 26.0000, 247.5208, 55.9000, 10.5000, 8.0500, 10.5… ## $ Embarked &lt;chr&gt; &quot;C&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot; Man kan også vælge intervaller - for eksempel hvis man vil vælge alle som er i halvtredserne. titanic_clean %&gt;% filter(Age &gt;= 50 &amp; Age &lt; 60) %&gt;% head() ## # A tibble: 6 × 11 ## PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 7 0 1 &quot;McCarthy, M… male 54 0 0 17463 51.9 ## 2 12 1 1 &quot;Bonnell, Mi… fema… 58 0 0 113783 26.6 ## 3 16 1 2 &quot;Hewlett, Mr… fema… 55 0 0 248706 16 ## 4 95 0 3 &quot;Coxon, Mr. … male 59 0 0 364500 7.25 ## 5 125 0 1 &quot;White, Mr. … male 54 0 1 35281 77.3 ## 6 151 0 2 &quot;Bateman, Re… male 51 0 0 S.O.P… 12.5 ## # … with 1 more variable: Embarked &lt;chr&gt; Man kan også kombinere betingelser fra forskellige kolonner, for eksempel i nedenstående vælger vi alle personer som er kvinder og som rejste ved første klasse. titanic_clean %&gt;% filter(Sex == &#39;female&#39; &amp; Pclass == 1) %&gt;% head() ## # A tibble: 6 × 11 ## PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2 1 1 Cumings, Mrs… fema… 38 1 0 PC 17… 71.3 ## 2 4 1 1 Futrelle, Mr… fema… 35 1 0 113803 53.1 ## 3 12 1 1 Bonnell, Mis… fema… 58 0 0 113783 26.6 ## 4 53 1 1 Harper, Mrs.… fema… 49 1 0 PC 17… 76.7 ## 5 62 1 1 Icard, Miss.… fema… 38 0 0 113572 80 ## 6 89 1 1 Fortune, Mis… fema… 23 3 2 19950 263 ## # … with 1 more variable: Embarked &lt;chr&gt; Vi kan også inddrage flere symboler. For eksempel i nedenståenden vælger vi personer som er kvinder og som rejste i enten første eller anden klass og som er i trediverne. Huske at tilføje runde parenteser omkring de to Pclass - prøv selv at fjerne dem og se, hvad der sker. titanic_clean %&gt;% filter(Sex == &#39;female&#39; &amp; (Pclass == 1 | Pclass == 2) &amp; Age %in% c(30:39)) %&gt;% glimpse() ## Rows: 43 ## Columns: 11 ## $ PassengerId &lt;int&gt; 2, 4, 62, 99, 191, 212, 216, 219, 231, 258, 259, 270, 310,… ## $ Survived &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1… ## $ Pclass &lt;int&gt; 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 2… ## $ Name &lt;chr&gt; &quot;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&quot;, &quot;Fu… ## $ Sex &lt;chr&gt; &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;… ## $ Age &lt;dbl&gt; 38, 35, 38, 34, 32, 35, 31, 32, 35, 30, 35, 35, 30, 31, 30… ## $ SibSp &lt;int&gt; 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;PC 17599&quot;, &quot;113803&quot;, &quot;113572&quot;, &quot;231919&quot;, &quot;234604&quot;, &quot;F.C.C… ## $ Fare &lt;dbl&gt; 71.2833, 53.1000, 80.0000, 23.0000, 13.0000, 21.0000, 113.… ## $ Embarked &lt;chr&gt; &quot;C&quot;, &quot;S&quot;, &quot;&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;,… 5.6.3 Comparitiver reference Her er en tabel af comparitiver. comparitive beskrivelse &lt; less than &gt; greater than &lt;= less than or equal to &gt;= greater than or equal to == equal to != not equal to &amp; and %in% in | or 5.6.4 Kombinere filter() og select() Man kan også kombinere både filter() og select() i samme kommando, som i følgende: titanic_clean %&gt;% filter(Sex == &#39;female&#39; &amp; (Pclass == 1 | Pclass == 2) &amp; Age %in% c(30:39)) %&gt;% select(Name, Fare) %&gt;% glimpse() ## Rows: 43 ## Columns: 2 ## $ Name &lt;chr&gt; &quot;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&quot;, &quot;Futrelle,… ## $ Fare &lt;dbl&gt; 71.2833, 53.1000, 80.0000, 23.0000, 13.0000, 21.0000, 113.2750, 7… Bemærk at man bør passe på rækkefølgen, som man anvender de forskellige funktioner. For eksempel hvis man bytter rundt filter() og select() i ovenstående, få man en advarsel - prøv selv at køre følgende: ##virker ikke!!!!!##### titanic_clean %&gt;% select(Name, Fare) %&gt;% filter(Sex == &#39;female&#39; &amp; (Pclass == 1 | Pclass == 2) &amp; Age %in% c(30:39)) %&gt;% glimpse() Det er fordi, hvis man første vælger at beholde variablerne Name og Age, så findes de andre variabler ikke mere i de resulterende dataframe, som bliver dernæst brugt i funktionen filter() - man kan derfor ikke benytte funktionen filter() på variablerne Pclass,Sex og Age. 5.6.5 dplyr verbs: mutate() Man kan avende funktionen mutate() til at tilføje en ny variable til en dataframe. I nedenstående tilføjer jeg en ny variabel med navnet Adult, der angiver om personen kan betragtes som en voksen (hvis vedkommende er mindst 18 år gammel). titanic_with_Adult &lt;- titanic_clean %&gt;% mutate(Adult = Age&gt;=18) titanic_with_Adult %&gt;% select(Adult) %&gt;% glimpse ## Rows: 714 ## Columns: 1 ## $ Adult &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, T… #Så kan man se, at der er 601 voksne og 113 børn som passagerere på skibet. Bemærk her, at jeg gemmer resultatet som en ny dataframe, der hedder titanic_with_Adult, og derefter bruger jeg glimpse() på det nye objekt titanic_with_Adult for at se, hvordan min nye dataframe ser ud. I forudgående eksempler havde jeg ikke gemt resultatet - bare brugt glimpse() for at se resultatet på skærmen. Hvis du gerne vil bruge din resulterende dataframe videre, så skal du husk at gemme den (med brugen af &lt;- tegn) funktionen ifelse() indenfor mutate() Jeg kan oprette variablen Adult sådan at den er mere informativ end bare TRUE eller FALSE. Jeg anvender funktionen ifelse(), der giver mulighed for at angive, at jeg gerne vil have teksten “adult” hvis udsagnet Age&gt;=18 er TRUE, og hvis FALSE vil jeg have teksten “child”: ifelse(Age&gt;=18,&quot;adult&quot;,&quot;child&quot;) Fuktionen ifelse() bruges indenfor funktionen mutate(), fordi vi er i gang med at oprette en ny variable Adult - ifelse() giver bare mulighed for at fortælle, hvordan den nye variablen skal ser ud. titanic_clean %&gt;% mutate(Adult = ifelse(Age&gt;=18,&quot;adult&quot;,&quot;child&quot;)) %&gt;% select(Age,Adult) %&gt;% glimpse() ## Rows: 714 ## Columns: 2 ## $ Age &lt;dbl&gt; 22, 38, 26, 35, 35, 54, 2, 27, 14, 4, 58, 20, 39, 14, 55, 2, 31,… ## $ Adult &lt;chr&gt; &quot;adult&quot;, &quot;adult&quot;, &quot;adult&quot;, &quot;adult&quot;, &quot;adult&quot;, &quot;adult&quot;, &quot;child&quot;, &quot;… Så er variablen lidt mere informativ end før. 5.6.6 rename() Man kan bruge rename() til at ændre navnet på en eller flere variabler i datasættet. Som eksempel bruger jeg rename() til at give en variable navnet Years i stedet for Age (bemærk at variablen Age findes ikke længere). titanic_clean %&gt;% rename(Years = Age) %&gt;% glimpse() ## Rows: 714 ## Columns: 11 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19… ## $ Survived &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1… ## $ Pclass &lt;int&gt; 3, 1, 3, 1, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 2, 2, 3… ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… ## $ Years &lt;dbl&gt; 22, 38, 26, 35, 35, 54, 2, 27, 14, 4, 58, 20, 39, 14, 55, … ## $ SibSp &lt;int&gt; 1, 1, 0, 1, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 1, 0, 0, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;A/5 21171&quot;, &quot;PC 17599&quot;, &quot;STON/O2. 3101282&quot;, &quot;113803&quot;, &quot;37… ## $ Fare &lt;dbl&gt; 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 51.8625, 21.0750… ## $ Embarked &lt;chr&gt; &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;… Man kan også ændre navne på flere kolonner samtidigt - for eksempel, i følgende laver jeg nogle oversættelsesarbejde: titanic_clean_dansk &lt;- titanic_clean %&gt;% rename(Overlevede = Survived, Navn = Name, Klasse = Pclass) Så du kan se, at jeg har ændrede de variabler navne. Jeg kalder den nye dataframe for titanic_clean_dansk, så jeg min danske udgave er blevet gemt et sted. Man kan også gøre sådan, at man har kun små bogstaver i de variabler navne. Jeg benytter den danske version, og Jeg anvender rename_with() og specificerer tolower. titanic_clean_dansk %&gt;% rename_with(tolower) %&gt;% #all variable names are lower case only glimpse() ## Rows: 714 ## Columns: 11 ## $ passengerid &lt;int&gt; 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19… ## $ overlevede &lt;int&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1… ## $ klasse &lt;int&gt; 3, 1, 3, 1, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 2, 2, 3… ## $ navn &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… ## $ age &lt;dbl&gt; 22, 38, 26, 35, 35, 54, 2, 27, 14, 4, 58, 20, 39, 14, 55, … ## $ sibsp &lt;int&gt; 1, 1, 0, 1, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 1, 0, 0, 0… ## $ parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, 0, 0… ## $ ticket &lt;chr&gt; &quot;A/5 21171&quot;, &quot;PC 17599&quot;, &quot;STON/O2. 3101282&quot;, &quot;113803&quot;, &quot;37… ## $ fare &lt;dbl&gt; 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 51.8625, 21.0750… ## $ embarked &lt;chr&gt; &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;… Prøv også at erstatte tolower med toupper. 5.6.7 dplyr verbs: recode() Med recode() kan man ændre hvordan en variable ser ud - fk. male/female kan ændres til 0/1, som i følgende. titanic_clean %&gt;% mutate(Sex = recode(Sex, &quot;male&quot; = 0, &quot;female&quot; = 1)) %&gt;% select(PassengerId,Name,Sex) %&gt;% glimpse() ## Rows: 714 ## Columns: 3 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19… ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ Sex &lt;dbl&gt; 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1… Bemærk den måde, at funktionen recode() er blevet brugt indenfor funktionen mutate(): jeg lavede en ny variable af samme navn, men med ændret værdier indenfor variablen. Hvis vi gerne vil skifter omvendt fra 0/1 til male/female er vi nødt til at skrive 1 / 0 for at specificie at vi har værdier som er tal, og vi gerne vil kalde dem for nogle andet (“male”/“female” i dette tilfælde): #recodes variable Sex and then recodes it back to original form again titanic_clean %&gt;% mutate(Sex = recode(Sex, male = 1, female = 0)) %&gt;% mutate(Sex = recode(Sex, `1` = &quot;male&quot;, `0` = &quot;female&quot;)) %&gt;% #note use of `` in the numbers select(PassengerId,Name,Sex) %&gt;% glimpse() ## Rows: 714 ## Columns: 3 ## $ PassengerId &lt;int&gt; 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19… ## $ Name &lt;chr&gt; &quot;Braund, Mr. Owen Harris&quot;, &quot;Cumings, Mrs. John Bradley (Fl… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;mal… 5.6.8 dplyr verbs: arrange() Man anvender arrange() for at vælge rækkefølgen på observationerne. I nedenstående tager vi datarammen titanic_clean og arrangerer observationer efter variablen Fare. Det sker således at, personer som betalt mindst er på toppen af de resultarende dataramme, og personer som betalt mest er på bunden. # Arrange by increasing Fare titanic_clean %&gt;% arrange(Fare) %&gt;% glimpse() ## Rows: 714 ## Columns: 11 ## $ PassengerId &lt;int&gt; 180, 264, 272, 303, 598, 807, 823, 379, 873, 327, 844, 819… ## $ Survived &lt;int&gt; 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0… ## $ Pclass &lt;int&gt; 3, 1, 3, 3, 3, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3… ## $ Name &lt;chr&gt; &quot;Leonard, Mr. Lionel&quot;, &quot;Harrison, Mr. William&quot;, &quot;Tornquist… ## $ Sex &lt;chr&gt; &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;m… ## $ Age &lt;dbl&gt; 36.0, 40.0, 25.0, 19.0, 49.0, 39.0, 38.0, 20.0, 33.0, 61.0… ## $ SibSp &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0… ## $ Parch &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ Ticket &lt;chr&gt; &quot;LINE&quot;, &quot;112059&quot;, &quot;LINE&quot;, &quot;LINE&quot;, &quot;LINE&quot;, &quot;112050&quot;, &quot;19972… ## $ Fare &lt;dbl&gt; 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 4.… ## $ Embarked &lt;chr&gt; &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;S&quot;… Hvis man gerne vil få det omvendt - at personer som betalt mest er på toppen af datarammen, kan man bruge desc() omkring Fare, som i nedenstående: # Arrange by decreasing Fare titanic_clean %&gt;% arrange(desc(Fare)) %&gt;% glimpse() ## Rows: 714 ## Columns: 11 ## $ PassengerId &lt;int&gt; 259, 680, 738, 28, 89, 342, 439, 312, 743, 119, 300, 381, … ## $ Survived &lt;int&gt; 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1… ## $ Pclass &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ Name &lt;chr&gt; &quot;Ward, Miss. Anna&quot;, &quot;Cardeza, Mr. Thomas Drake Martinez&quot;, … ## $ Sex &lt;chr&gt; &quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;mal… ## $ Age &lt;dbl&gt; 35.00, 36.00, 35.00, 19.00, 23.00, 24.00, 64.00, 18.00, 21… ## $ SibSp &lt;int&gt; 0, 0, 0, 3, 3, 3, 1, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1… ## $ Parch &lt;int&gt; 0, 1, 0, 2, 2, 2, 4, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 1, 2, 1… ## $ Ticket &lt;chr&gt; &quot;PC 17755&quot;, &quot;PC 17755&quot;, &quot;PC 17755&quot;, &quot;19950&quot;, &quot;19950&quot;, &quot;199… ## $ Fare &lt;dbl&gt; 512.3292, 512.3292, 512.3292, 263.0000, 263.0000, 263.0000… ## $ Embarked &lt;chr&gt; &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;S&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;, &quot;C&quot;… 5.7 Visualisering: bruge som input i ggplot2 Efter man har lavet bearbejdning med tidyverse kommandoer, kan man specificere de resulterende dataframe som data i funktionen ggplot(). Man benytter %&gt;% til at forbinde de dpylr kommandoer med den ggplot funktion, og I dette tilfælde behøver man ikke at angive navnet på datasættet indenfor funktionen ggplot. I nedenstående eksempel tager jeg udgangspunkt i titanic_clean og så laver jeg et barplot som viser antallet af passagerer som rejste i hver af de tre klass. titanic_clean %&gt;% ggplot(aes(x=Pclass,fill=as.factor(Pclass))) + geom_bar(stat=&quot;count&quot;) + theme_minimal() Jeg gør det lidt mere kompliceret i følgende, ved at tage titanic_clean, lave en ny kolon der hedder Adult, og så bruge den resulterende dataframe med funktionen ggplot, hvor jeg laver et plot med Adult på x-aksen for at tælle op antallet af voksne og børn. titanic_clean %&gt;% mutate(Adult = ifelse(Age&gt;=18,&quot;Adult&quot;,&quot;Child&quot;)) %&gt;% ggplot(aes(x=Adult,fill=Adult)) + geom_bar(stat=&quot;count&quot;) + theme_minimal() Så viser det, at der var 600 Adults og lidt over 100 Children ombord skibet. 5.8 Problemstillinger 1) Lav quizzen på Absalon - “Quiz - tidyverse - part 1” Vi øver os med titanic. Inlæs de data og lave oprydningen med følgende kode: library(tidyverse) library(titanic) titanic &lt;- as_tibble(titanic_train) titanic_clean &lt;- titanic %&gt;% select(-Cabin) %&gt;% drop_na() %&gt;% mutate(Adult = ifelse(Age&gt;=18,&quot;adult&quot;,&quot;child&quot;)) %&gt;% mutate(Survived = recode(Survived, `1` = &quot;yes&quot;, `0` = &quot;yes&quot;)) glimpse(titanic_clean) #take a look! #todo: make survived into a factor #recode embarked so we have the place names #include ifelse and count 2) select(). Fjern variablen Name fra titanic_clean. titanic_clean %&gt;% select(...) #redigere her Tilføj også head() for at få kun de første 6 rækker Prøv at erstatte head() med glimpse() - det er bare en anden måde at kigge på datarammen. 3) select(). Lave en ny dataramme fra titanic_clean med kun variabler Name, Pclass og Fare. Gør det en forskel, hvilke rækkefølger man skriver Name, Pclass og Fare? 4) select(). I stedet for at specificere bestemt kolonner navn, skriv starts_with(\"S\") indenfor select(). Hvad sker der? Prøve også contains(\"ar\") 5) filter(). Lave en ny dataramme fra titanic_clean med alle personer som er male og over 30 år gammel. 6) filter(). Lave en ny dataramme fra titanic_clean med alle passagerer som er mellem 10 og 15 og rejst enten første eller anden klass. Hvor mange observationer er der i den ny dataramme? Prøve at tilføje %&gt;% count() til kommandoen - få man så samme tal? 7) filter() og select() : kombinering med %&gt;% Lave en ny dataramme fra titanic_clean med alle passagerer som er male og survived, og angiv kun kolonner Name, Age og Fare. 8) filter() og select() kombinering med %&gt;% Lave en ny dataramme fra titanic_clean med kun variabler Name og Age og dernæst specificere kun de passagerer som er over 60. Få man så den samme sæt observationer hvis du skriver dine select() og filter() funktioner omvendt her? Hvorfor? 9) Mutate(). Lave en ny dataramme fra titanic_clean som hedder FareRounded som viser Fare rundet til det nærmest integar (hint: benytte funktionen round()). 10) Mutate(). Lave en ny dataramme fra titanic_clean med en ny kolon som hedder Family som angiver TRUE hvis Parch er ikke nul, ellers FALSE. Anvende ifelse til at gøre variablen mere intuitive - “Family” og “Not family.” 11) Arrange(). Lave en ny dataramme fra titanic_clean med observationerne arrangerede således at de yngst er på toppen og ældste er på bunden. Kig på resultatet - hvad kan du fortælle om den yngste passager ombord skibet Titanic? Hvad kan du fortælle om den ældste passager ombord skibet? Overlevede de? Hvad med de andre ældste passagerer? 12) Arrange() og kombinering med andre verber. Lave en ny dataramme fra titanic_clean med kun personer med SibSp&gt;0 og som gik ombord skibet i Southampton (S for variablen Embarked), arrangere de resulterende observationer efter Fare (højeste på toppen) og angiv kun kolonnerne Name, Age og Fare. 13) Rename. Fra titanic_clean angiv kun variabler Survived,Ticket, og Name og ændre deres navne til Overlevede, Billet og Navn. Gøre variabler navne til store bogstaver ved at anvende rename_with(). 14 recode() Tjek kursus notaterne og se funktionen recode(). Afpøve den ved at ændre værdierne i variablen Embarked således at man få de fulde navne af de steder folk gik ombord skibet, i stedet for kun den første bogstav. Fra data beskrivelsen: Embarked: Where passengers boarded the titanic. C = Cherbourg, Q = Queenstown, S = Southampton). 14) Lave et plot. Fra titanic_clean bruge filter() til at lave en ny dataramme kun med personer under 30 og bruge den til at lave et barplot som viser antallet af personer opdelt efter Pclass. Bruge følgende struktur for koden: titanic_clean %&gt;% filter(...) %&gt;% #rediger linjen ggplot(aes(...)) + .... #tilføj plot 15) Lave et plot. Fra titanic_clean, bruge mutate() til at lave et nyt kolon der hedder with_siblings_spouses der er TRUE hvis SibSp ikke er nul. Brug den til at lave boxplots som viser Fare på y-aksen og with_siblings_spouses på x-aksen. Ekstra: Ændre skalen på y-aksen for at gøre plottet klarer at fortolke. 5.9 Kommentarer I morgen arbejder vi videre med tidyverse. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
