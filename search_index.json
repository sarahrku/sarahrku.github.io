[["basics.html", "Visualisering af biologiske datasæt Chapter 1 Grundlæggende R 1.1 Inledning til kapitel 1.2 Rstudio 1.3 Sætte working directory 1.4 R pakker 1.5 Hvor kommer data fra? 1.6 Vectorer i R 1.7 Dataramme koncepter 1.8 Descriptive statistics 1.9 Statistike analyse 1.10 Problemstillinger", " Visualisering af biologiske datasæt Sarah Rennie 2022-03-24 Chapter 1 Grundlæggende R 1.1 Inledning til kapitel Jeg har prøvet at opsummere nogle grundlæggende ting, som I skal vide før vi går videre i kurset. Derefter er der nogle problemstillinger som jeg anbefaler at I arbejder igennem, for at tjekke jeres forståelse af koncepterne og udfylder eventuelle huller i jeres viden. Det er helt fint, hvis I ikke har set de hele før. Skrive til mig gerne, hvis I har nogle spørgsmål, som vi kan diskutere i vores næste lektion. 1.2 Rstudio Det allerførste man skulle gør, hvis man ikke har brugt RStudio før, er at downloade den gratis på nettet: https://www.rstudio.com/products/rstudio/download/#download Vi kommer fremadrettet til at være meget afhængig af nogle af dets funktionalitet til at lave blandt andet R Markdown dokumenter. R Markdown bliver præsenteret i vores næste lektion. 1.2.1 De forskellige vinduer i RStudio Hvis man ikke har et kendskab til RStudio, kan man tjekke det her for at lære de forskellige vinduer at kende: https://bookdown.org/ndphillips/YaRrr/the-four-rstudio-windows.html Man skrive kode i Source (øverst til venstre) Man kører kode ved at tryk CMD+ENTER (eller WIN-KEY+ENTER) Kode køres ind i Console (som plejer at være nederst til venstre, selvom det er øverst til højere i billedet). Environment - her kan man se, alle objekter i workspace-en. 1.3 Sætte working directory Når man arbejde på et projekt, er det nyttigt at vide, den working directory som R arbejder fra - det er det sted, hvor R forsøger at åbne eller gemme filer, medmindre man angiver et andet path. getwd() #se nuværende working directory list.dirs(path = &quot;.&quot;, recursive = FALSE) #se mappe indenfor working directory setwd(&quot;~/Documents/&quot;) #sætte en ny working directory (C:/Users/myname/Documents hvis man bruger Windows) 1.4 R pakker R pakker er simpelthen en samling af funktioner (eller datasæt i nogle tilfælde), som udvider hvad er tilgængelige i base-R (den R man få, uden at indlæse nogle som helst pakke). I R er der mange tusind R pakke (faktisk op mod 100,000), som plejer at være tilgængelige på CRAN (https://cran.r-project.org/). Indenfor biologiske fag er der også mange flere på Bioconductor (https://www.bioconductor.org/), og nogle gange er R-pakke også installeret direkte fra Github. I dette kursus arbejder vi rigtig meget med en pakke der hedder tidyverse. Før man indlæse det, skal man først sikre sig, at pakken er installeret på systemet: install.packages(&quot;tidyverse&quot;) Alle pakker på CRAN er installeret på samme måde. Når man bruger en R pakke, skal man først indlæse den ved at bruge library(): library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.2 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.3 ✓ stringr 1.4.0 ## ✓ readr 1.4.0 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() I dette tilfælde kan man se, at tidyverse er faktisk en samling af otte andre pakke, som blev indlæste. Vi kommer til at arbejde med disse pakker fra kapitel tre (vi starter med ggplot2 og så nogle af de andre pakke fra tidyverse fra kapitel fire) 1.5 Hvor kommer data fra? De data, vi arbejde med i kurset stammer fra forskellige steder. 1.5.1 Indbygget datasæt I R er der mange indbygget datasæt som er meget brugbare for at vise eller lege med koncepter, som især gøre dem populære for undervisningsmateriale. Indbygget datasæt kan være tilgænglige indenfor mange pakke, men library(datasets) er den mest brugt (der er også mange indenfor library(ggplot2). For eksempel, for at indlæse datasættet, der hedder ‘iris,’ kan man bruge data(): library(datasets) data(iris) Så er en dataramme tilgængelige som en objekt i workspacen - se “Environment” fane på højere side i RStudio, eller indtaste ls(), så bør du kunne se en objekt med navn ‘iris.’ Man kan kun arbejde med objekter som er en del af workspacen. 1.5.2 Importering af data fra .txt fil Det er meget hyppigt, at man har sin data i formen af en .txt fil eller .xlsx fil på sin computer. Den nemmeste måde at få åbnet en .txt fil er ved at bruge read.table(), som i nedenstående: data &lt;- read.table(&quot;mydata.txt&quot;) #indlæse data filen mydata.txt som er i working directory head(data) Huske at hvis data har kolonner navne, så skal man bruge header=T for at undgå, at den første række i data bliver disse navne i stedet for virkelige observationer. data &lt;- read.table(&quot;mydata.txt&quot;,header=T) #indlæse data filen mydata.txt som er i working directory head(data) 1.5.3 Importering af data fra Excel Der findes også en hjælpsom pakke, der kan indlæse Excel-ark direkte ind i R: library(readxl) data &lt;- read_excel(&quot;data.xlsx&quot;) data 1.6 Vectorer i R a &lt;- 1:5 a &lt;- c(1,2,3,4,5) a ## [1] 1 2 3 4 5 c &lt;- c(&quot;cat&quot;,&quot;mouse&quot;,&quot;horse&quot;,&quot;sheep&quot;,&quot;dog&quot;) c ## [1] &quot;cat&quot; &quot;mouse&quot; &quot;horse&quot; &quot;sheep&quot; &quot;dog&quot; 1.6.1 logicals med vectorer b &lt;- a %in% c(1,2) b ## [1] TRUE TRUE FALSE FALSE FALSE is.numeric(c) ## [1] FALSE 1.7 Dataramme koncepter http://www.r-tutor.com/r-introduction/data-frame Mange af de ting, som vi laver i R tager udgangspunkten i datarammer. mydf &lt;- data.frame(&quot;personID&quot;=1:5, &quot;height&quot;=c(140,187,154,132,165), &quot;age&quot;=c(34,31,25,43,29)) mydf ## personID height age ## 1 1 140 34 ## 2 2 187 31 ## 3 3 154 25 ## 4 4 132 43 ## 5 5 165 29 Huske, at vores data.frame, ligesom et matrix (i R: matrix()) har to dimensioner - række og kolonner Forskellen mellem en matrix og en dataramme er, at datarammer kan indeholde mange forskellige data typer (herunder numeriske, faktorer, karakterer osv.), men matrix indeholder kun numeriske data. For eksempel mydf$colour &lt;- c(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;orange&quot;,&quot;purple&quot;) mydf ## personID height age colour ## 1 1 140 34 red ## 2 2 187 31 blue ## 3 3 154 25 green ## 4 4 132 43 orange ## 5 5 165 29 purple er en dataramme med forskellige data type men følgende er en matrix matrix(c(1, 2, 3, 4, 5, 6), nrow=3, ncol=2) ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 med kun numeriske data, som kan bruges til matematik operationer (matrix multiplikation osv.). I dette kursus beskæftiger os primært med datarammer. 1.7.1 Subsets mydf[række, kolonner] #not run mydf[1, 2] #first row, second column Man kan kigge på en subset af rækkerne i de data ved at mydf[mydf$height&gt;=165,] #alle rækker i datarammen med height = 165 eller over ## personID height age colour ## 2 2 187 31 blue ## 5 5 165 29 purple Man kan også bruge %in% mydf[mydf$personID %in% c(1,3,5),] #alle personer med personID 1,3 eller 5 ## personID height age colour ## 1 1 140 34 red ## 3 3 154 25 green ## 5 5 165 29 purple Personer med personID, der ikke er 1,3 eller 5 mydf[!(mydf$personID %in% c(1,3,5)),] #alle personer med personID 2 eller 4 ## personID height age colour ## 2 2 187 31 blue ## 4 4 132 43 orange 1.8 Descriptive statistics 1.8.1 Simulere data fra distributions Se for eksempel: http://www.r-tutor.com/elementary-statistics/probability-distributions/normal-distribution Man kan nemt lave sin egne ‘fake’ data ved at simulere det fra nogle distributioner. Det vil typiske være den normale distribution, idet den normale distribution opstå mest hyppigt i den virkelige verden (huske den klassiske klokke-form). I R kan man bruge funktionen rnorm til at simulere data - først angiver man, hvor mange observationer man vil have, og så den mean og standard deviation, som er de to parametre som er nødvendige til at beskrive en normal distribution. x &lt;- rnorm(25,mean=0,sd=1) #standard normal distribution x #så har vi 25 værdier fra en normal distribution med mean=0 og standard deviation=1. ## [1] -0.74483947 0.28395423 -1.38078503 -0.93349921 -0.79981697 0.22783463 ## [7] -0.69813166 0.35929439 0.67556919 0.45674615 0.73393717 -0.50814295 ## [13] -0.31135627 0.81550506 0.94425669 -0.46990802 -0.77959402 1.05401837 ## [19] -0.15025811 -0.87093308 0.58441260 0.05000459 -0.45109888 -0.79216883 ## [25] -0.10762238 Her har vi kun 25 værdier, men hvis dataen er store, måske vil vi hellere kun kigge på de første (eller sidste) værdier: head(x) #første 6 ## [1] -0.7448395 0.2839542 -1.3807850 -0.9334992 -0.7998170 0.2278346 tail(x) #sidste 6 ## [1] -0.87093308 0.58441260 0.05000459 -0.45109888 -0.79216883 -0.10762238 x[1] #første værdi ## [1] -0.7448395 x[length(x)] #sidste data point ## [1] -0.1076224 Bemærk, at til forskellen af Python og mange andre programmering sprog, R bruger 1-baserende indicer - det betyder, at den første værdi er x[1] og ikke x[0] som i Python. 1.8.2 Measures of central tendency function Description mean() mean \\(\\bar{x}_{i} = \\frac{1}{n}\\sum_{i=1}^{n} x_{i}\\) median() median value max() maximum value min() minimum value var() variance \\(s^2 = \\frac{1}{n-1}\\sum_{i=1}^{n} (x_{i} - \\bar{x}_{i})^2\\) sd() standard deviation \\(s\\) Lad os afprøve dem på vores simulerede data: my_mean &lt;- mean(x) my_median &lt;- median(x) my_max &lt;- max(x) my_min &lt;- min(x) my_var &lt;- var(x) my_sd &lt;- sd(x) c(my_mean,my_median,my_max,my_min,my_var,my_sd) ## [1] -0.1125049 -0.1502581 1.0540184 -1.3807850 0.4761601 0.6900435 Man kan også lave et summary af dataen, som bestå af mange af de statistiker navnt ovenpå: summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -1.3808 -0.7448 -0.1503 -0.1125 0.4567 1.0540 1.8.3 tapply() En meget brugbart funktion, som er værd at vide, er tapply(). data(iris) tapply(iris$Sepal.Length,iris$Species,mean) # ovenstående i kun en linje ## setosa versicolor virginica ## 5.006 5.936 6.588 Her tager vi en variabel der hedder Sepal.Length, opdele den i henhold til Species, og beregner mean for enhver af de tre Species (setosa, versicolor og virginica). Man kan opnå det samme resultat ved at beregne mean for de tre Species hver for sig: # gennemsnit Sepal Length for Species setosa mean_setosa &lt;- mean(iris$Sepal.Length[iris$Species==&quot;setosa&quot;]) # gennemsnit Sepal Length for Species versicolor mean_versi &lt;- mean(iris$Sepal.Length[iris$Species==&quot;versicolor&quot;]) # gennemsnit Sepal Length for Species virginica mean_virgin &lt;- mean(iris$Sepal.Length[iris$Species==&quot;virginica&quot;]) c(mean_setosa,mean_versi,mean_virgin) ## [1] 5.006 5.936 6.588 Hvis der er mange grupper, så er der en stor fordele ved at brug tapply her. Det er også værd at ved koncepten, fordi vi kommer til lære en lignende koncept i tidyverse (med group_by og summarise). 1.9 Statistike analyse Det er bare en kort oversigt over nogle af de grundlæggende analyser man kan lave i R, som man kan referere til. 1.9.1 1 sample t-test Første simulere vi noget data fra normal distribution med mean = 3. set.seed(290223) # bare for at få den samme resultat hver gang x &lt;- rnorm(10,3,1) Nullhypotsen vs alternativ hypotesen: \\(H_{0}: \\mu = 3\\), VS \\(H_{1}: \\mu \\neq 3\\) Lave test i R: t.test(x,mu = 3) ## ## One Sample t-test ## ## data: x ## t = -1.1448, df = 9, p-value = 0.2818 ## alternative hypothesis: true mean is not equal to 3 ## 95 percent confidence interval: ## 2.169968 3.272231 ## sample estimates: ## mean of x ## 2.721099 p-værdien er 0.2818, som er &gt; 0.05, så forkaster vi ikke nullhypotesen, og konkluderer at \\(mu = 3\\). 1.9.2 2-sample t-test Samme variance: x &lt;- rnorm(10,3,1) y &lt;- rnorm(10,5,1) t.test(x,y,var.equal = T) ## ## Two Sample t-test ## ## data: x and y ## t = -5.4258, df = 18, p-value = 3.729e-05 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -2.700858 -1.193081 ## sample estimates: ## mean of x mean of y ## 2.783056 4.730025 Variance forskellige: x &lt;- rnorm(10,3,1) y &lt;- rnorm(10,5,3) t.test(x,y,var.equal = F) #var.equal=F er &#39;default&#39; så man behøver ikke at specifere ## ## Welch Two Sample t-test ## ## data: x and y ## t = -2.0238, df = 11.77, p-value = 0.0663 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.9077927 0.1483728 ## sample estimates: ## mean of x mean of y ## 2.757436 4.637146 1.9.3 Paired t-test before &lt;- rnorm(10,3,1) after &lt;- rnorm(10,5,3) t.test(before,after,paired=T) ## ## Paired t-test ## ## data: before and after ## t = -0.89463, df = 9, p-value = 0.3943 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.900384 1.689647 ## sample estimates: ## mean of the differences ## -1.105368 1.9.4 ANOVA Her har man flere grupper i stedet for to. Grupper må være normale fordelt Variancen må være de samme i alle grupper For k grupper, er nul/alternativhypotese: \\(H_{0}: \\mu_{1} = \\mu_{2} = \\ldots = \\mu_{k}\\) \\(H_{1}:\\) ikke alle middelværdier er enes group1 &lt;- rnorm(50,10,3) group2 &lt;- rnorm(55,10,3) group3 &lt;- rnorm(48,5,3) #data må være i en dataramme, med den ene kolon = vores værdier, og den anden kolon = grupper y &lt;- c(group1,group2,group3) x &lt;- c(rep(&quot;G1&quot;,50),rep(&quot;G2&quot;,55),rep(&quot;G3&quot;,48)) mydf &lt;- data.frame(&quot;group&quot;=x,&quot;values&quot;=y) mylm &lt;- lm(values~group,data=mydf) anova(mylm) ## Analysis of Variance Table ## ## Response: values ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group 2 896.42 448.21 46.703 &lt; 2.2e-16 *** ## Residuals 150 1439.56 9.60 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 P-værdien er 1.877e-15 (&lt;0.05), så nulhypotesen er forkastet til fordele af alternativhypotesen. Bemærke at det er til trods af, at to af de tre grupper kommer fra en normal fordeling med præcis de samme middelværdier (det er nok, at den trejde gruppe har en anden middelværdi). 1.9.5 Correlations Måler sammenhængen mellem to variabler: \\(&gt;0\\) betyder, at der er en postiv sammenhæng \\(&lt;0\\) betyder, at der er en negativ sammenhæng \\(=0\\) betyder, at der er ingen sammenhængen mellem de to variabler data(cars) cor(cars$speed, cars$dist) ## [1] 0.8068949 cor.test(cars$speed, cars$dist) ## ## Pearson&#39;s product-moment correlation ## ## data: cars$speed and cars$dist ## t = 9.464, df = 48, p-value = 1.49e-12 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.6816422 0.8862036 ## sample estimates: ## cor ## 0.8068949 1.9.6 Linær regression Formål: finde den bedste rette linje: plot(cars$speed,cars$dist) abline(lm(dist ~ speed, data=cars) ) Man bruger lm() og huske at det skrives som lm(y~x,data=mydata), hvor i dette tilfælde er x speed (x-aksen i ovenstående plot) og y er dist (y-aksen i ovenståen plot), for mydata = cars. mylm &lt;- lm(dist ~ speed, data=cars) # build linear regression model mylm ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932 1.10 Problemstillinger Jeg har lavet en quiz i Absalon, hedder “Quiz - Basics” - som I kan starte med. Åben en ny fil i Rstudio, ved at trykke på “File” &gt; “New File” &gt; “R script.” Leger lidt - fk. nogle muligheder: 2+2 x &lt;- 4 x &lt;- x+2 sqrt(x) sqrt(x)^2 rnorm(10,2,2) log10(100) Huske at den nemmeste måde at kører kode er ved at trykke CMD+ENTER (Mac) eller WIN-KEY+ENTER (Windows). Åbne op og kigge på nogle af de indbygget datasæt som vi bruger i kurset. Prøve head(), summary() osv. Prøve også fk. ?cars for at se en beskrivelse. data(iris) data(cars) data(sleep) data(PlantGrowth) head(chickwts) #se her for andre: library(help = &quot;datasets&quot;) Lave en data.frame (dataramme) med tre kolonner som hedder “navn,” “alder” og “farve.” Sørge for, at den har 8 rækker. mydf &lt;- data.frame(&quot;navn&quot;= ...) #not run, slette &quot;...&quot; og skrive data dim(mydf) # otte række og tre kolonner mydf Lads os lave plotter i ‘baseR.’ Vi kommer til at omdefinere hvordan vi laver plotter, når vi arbejder med ggplot2, men det er nyttigt at have et kendskab til baseR plotter. Jeg giver nogle muligheder for datasættet, der hedder “iris” - afprøve dem for nogle af de andre ovenstående indbygget datasæt, som I kiggede på. plot(iris$Sepal.Length,iris$Sepal.Width) hist(iris$Sepal.Width) boxplot(iris$Sepal.Length~iris$Species) Man kan også gøre plotterne lidt pænere ved at give dem en titel/aksen-navne osv. Prøve ?plot for at se nogle muligheder, og tilføje ylab, xlab, main (titel) i én af plotterne. Lege også med col (farver). Øve med at åbne en fil, der sidder i Absalon og hedder “reactions.txt.” Kopiere filen ind i egen working directory (fk. Downloads or Documents - huske man kan sætte en working directory setwd(\"~/Documents/\")) og bruge read.table() (giv objektet et navn, e.g. data). Huske at tjekke, om filen har en ‘header’ og bruge således header=T hvis nødvendigt. Kolonner navne “subject” og “condition” indlæses som data type ‘int’ (heltal) men skulle hellere være ‘factorer’ (fordi de er kvalitatitiv). Gøre dem til facktorer, fk. data$subject &lt;- as.factor(data$subject) #gøre subject til en faktor ## gøre den samme her for condition: data$... Bruge mean til at beregne den gennemsnitlige reaktion tid (RT) for hver af de to konditioner. Nu prøve at anvende tapply til at gøre den samme. Bemærke at vores data er ‘paired’ - det er den samme sæt “subject”s for hver af de to “conditions”s (altså “subject” = 1 har en værdi for både “condition” = 1 og “condition” = 2). Lave en scatter-plot af reaktioner tider mellem de to “condition”s. Lave en paired-t-test t.test(x,y,paired=T). Hvad er p-værdien? Hvad er nulhypotesen og alternativ hypotesen? Er der en forskel mellem de to konditioner? OBS: “reactions.txt” er emnet af video 2 i det næste kapitel om R Markdown. "]]
